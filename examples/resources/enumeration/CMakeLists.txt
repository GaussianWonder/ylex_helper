# Project definition
cmake_minimum_required(VERSION 3.21)
project(lists)

find_program(LEX_EXE flex)
if(LEX_EXE STREQUAL "LEX_EXE-NOTFOUND")
  message(FATAL_ERROR "Please install flex!")
endif(LEX_EXE STREQUAL "LEX_EXE-NOTFOUND")

find_program(YACC_EXE bison)
if(YACC_EXE STREQUAL "YACC_EXE-NOTFOUND")
  message(FATAL_ERROR "Please install bison!")
endif(YACC_EXE STREQUAL "YACC_EXE-NOTFOUND")

FIND_PACKAGE(BISON REQUIRED)
SET(BisonOutput ${CMAKE_SOURCE_DIR}/parser.cpp)
IF(BISON_FOUND)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${BisonOutput}
    COMMAND ${BISON_EXECUTABLE}
            --defines=${CMAKE_SOURCE_DIR}/tokens.h
            --output=${BisonOutput}
            ${CMAKE_SOURCE_DIR}/lists.y
    COMMENT "Generating parser.cpp"
  )
ENDIF()

FIND_PACKAGE(FLEX REQUIRED)
SET(FlexOutput ${CMAKE_SOURCE_DIR}/scanner.cpp)
IF(FLEX_FOUND)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${FlexOutput}
    COMMAND ${FLEX_EXECUTABLE}
            --outfile=${FlexOutput}
            ${CMAKE_SOURCE_DIR}/lists.l
    COMMENT "Generating scanner.cpp"
  )
ENDIF()

# Search all directories that contain headers
macro(HEADER_DIRECTORIES return_list)
  file(GLOB_RECURSE new_list *.h)
  set(dir_list "")
  foreach(file_path ${new_list})
    get_filename_component(dir_path ${file_path} PATH)
    set(dir_list ${dir_list} ${dir_path})
  endforeach()
  list(REMOVE_DUPLICATES dir_list)
  set(${return_list} ${dir_list})
endmacro()

add_definitions("-std=c++17")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fcoroutines -fconcepts -fpermissive")

# Get all *.c files
file(GLOB_RECURSE Sources RELATIVE ${CMAKE_SOURCE_DIR} "src/*.cpp")

# Get all *.h files
file(GLOB_RECURSE Headers *.h)

# Add everything to executable
add_executable(${PROJECT_NAME} ${Headers} ${BisonOutput} ${FlexOutput} main.cpp ${Sources})

target_compile_features(lists PRIVATE cxx_std_17)
add_definitions("-std=c++17")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fcoroutines -fconcepts -fpermissive")

# Get all header dirs to include
header_directories(header_dir_list)

list(LENGTH header_dir_list header_dir_list_count)
message(STATUS "[INFO] Found ${header_dir_list_count} header directories.")

target_include_directories(
  ${PROJECT_NAME}
  PUBLIC
  ${header_dir_list}
)
